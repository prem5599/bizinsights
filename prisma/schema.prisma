// prisma/schema.prisma - Updated with WebhookEvent model
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String?  // Added for credentials authentication
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations OrganizationMember[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id               String @id @default(cuid())
  name             String
  slug             String @unique
  subscriptionTier String @default("free")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  members      OrganizationMember[]
  integrations Integration[]
  insights     Insight[]
  reports      Report[]
  invitations  OrganizationInvitation[]
}

model OrganizationMember {
  id             String @id @default(cuid())
  organizationId String
  userId         String
  role           String @default("member") // owner, admin, member, viewer
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model OrganizationInvitation {
  id             String    @id @default(cuid())
  organizationId String
  email          String
  role           String
  invitedBy      String
  token          String    @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime  @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
}

model Integration {
  id                 String    @id @default(cuid())
  organizationId     String
  platform           String    // shopify, stripe, google_analytics
  platformAccountId  String?
  accessToken        String?   @db.Text
  refreshToken       String?   @db.Text
  tokenExpiresAt     DateTime?
  status             String    @default("active")
  lastSyncAt         DateTime?
  metadata           Json      @default("{}")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  dataPoints     DataPoint[]
  webhookEvents  WebhookEvent[]

  @@unique([organizationId, platform])
}

model DataPoint {
  id             String   @id @default(cuid())
  integrationId  String
  metricType     String   // revenue, orders, sessions, customers
  value          Decimal  @db.Decimal(15,2)
  metadata       Json     @default("{}")
  dateRecorded   DateTime
  createdAt      DateTime @default(now())

  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId, metricType, dateRecorded])
}

model WebhookEvent {
  id             String    @id @default(cuid())
  integrationId  String
  topic          String    // webhook topic/event type
  status         String    // received, processed, failed, signature_verification_failed, invalid_json
  externalId     String?   // external event ID from the platform
  error          String?   @db.Text
  receivedAt     DateTime  @default(now())
  processedAt    DateTime?
  metadata       Json      @default("{}")

  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId, topic, receivedAt])
  @@index([integrationId, status])
}

model Insight {
  id             String  @id @default(cuid())
  organizationId String
  type           String  // trend, anomaly, recommendation
  title          String
  description    String  @db.Text
  impactScore    Int     // 1-10
  isRead         Boolean @default(false)
  metadata       Json    @default("{}")
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
}

model Report {
  id               String   @id @default(cuid())
  organizationId   String
  reportType       String   // daily, weekly, monthly
  title            String
  content          Json
  dateRangeStart   DateTime
  dateRangeEnd     DateTime
  generatedAt      DateTime @default(now())
  emailedAt        DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, reportType, generatedAt])
}